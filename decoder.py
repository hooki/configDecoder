from __future__ import print_function

import sys
import struct

from unicorn import *
from unicorn.mips_const import *


# for debugging
def hook_code(uc, address, size, user_data):
    print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" %(address, size))

base = 0x1000000
allocated = 0

def make_mem_map(size):
	global base
	global allocated

	addr = base + allocated

	alloc_sz = size + (4096 - (size % 4096))
	mu.mem_map(addr, alloc_sz)

	allocated += alloc_sz

	return addr

config_path = sys.argv[1]
out_path = sys.argv[2]

MIPS_CODE32 = "\x00\x80\x10\x25\x24\x87\x0f\xee\x24\x03\x00\x20\xa0\x43\x00\x00\x24\x42\x00\x01\x00\x00\x88\x25\x14\x47\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x25\x00\x00\x38\x25\x24\x03\x0f\xee\x00\x07\x38\x42\x30\xe8\x01\x00\x30\xea\x00\x01\x15\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x38\x21\x24\x42\x00\x01\x00\xa2\x40\x2b\x90\xe7\x00\x00\x34\xe7\xff\x00\x15\x00\x00\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x30\xea\x00\x01\x02\x02\x48\x21\x24\x48\x00\x01\x11\x40\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x50\x2b\x01\x00\x10\x25\x91\x28\x00\x00\x24\x69\x00\x01\x15\x40\x00\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd1\x50\x21\x00\x83\x18\x21\xa0\x68\x00\x00\x26\x31\x00\x01\xa1\x48\x00\x00\x31\x23\x0f\xff\x10\x00\xff\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x50\x2b\x91\x29\x00\x00\x24\x42\x00\x02\x15\x40\x00\x23\x00\x00\x00\x00\x00\x00\x00\x00\x02\x08\x40\x21\x00\xa2\x50\x2b\x91\x08\x00\x00\x31\x0c\x00\xf0\x15\x40\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x61\x00\x31\x08\x00\x0f\x01\x89\x60\x25\x25\x0b\x00\x02\x00\xd1\x48\x21\x00\x00\x40\x25\x01\x0c\x50\x21\x31\x4a\x0f\xff\x00\x8a\x50\x21\x91\x4a\x00\x00\x25\x08\x00\x01\x24\x6e\x00\x01\x01\x68\x68\x2a\x00\x83\x18\x21\xa0\x6a\x00\x00\x26\x31\x00\x01\xa1\x2a\x00\x00\x31\xc3\x0f\xff\x25\x29\x00\x01\x11\xa0\xff\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x38\x42\x10\x00\xff\xb8\x00\x00\x00\x00\x00\x00\x00\x00"

mu = Uc(UC_ARCH_MIPS, UC_MODE_MIPS32 + UC_MODE_BIG_ENDIAN)

code = make_mem_map(len(MIPS_CODE32))
tmp = make_mem_map(0x1011)

config = open(config_path, 'rb').read()
inlen = struct.unpack('>I', config[8:12])[0]
print(inlen)
inbuf = make_mem_map(inlen)
outbuf = make_mem_map(0xffff)

mu.mem_write(code, MIPS_CODE32)

mu.mem_write(inbuf, config[0xC:0xC + inlen])

mu.reg_write(UC_MIPS_REG_A0, tmp)
mu.reg_write(UC_MIPS_REG_S0, inbuf)
mu.reg_write(UC_MIPS_REG_A1, inlen)
mu.reg_write(UC_MIPS_REG_A2, outbuf)

# for debugging
# mu.hook_add(UC_HOOK_CODE, hook_code)

mu.emu_start(code, code + len(MIPS_CODE32))

outlen = mu.reg_read(UC_MIPS_REG_S1)
decoded_config = mu.mem_read(outbuf, outlen)
open(out_path, 'wb').write(decoded_config)
